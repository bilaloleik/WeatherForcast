// Mocks generated by Mockito 5.4.4 from annotations
// in weather_forecast/test/weather_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_forecast/data/weather/models/weather_model.dart' as _i3;
import 'package:weather_forecast/data/weather/repositories/weather_repository_impl.dart'
    as _i4;
import 'package:weather_forecast/data/weather/services/weather_cache_service.dart'
    as _i6;
import 'package:weather_forecast/data/weather/services/weather_service.dart'
    as _i7;
import 'package:weather_forecast/domain/weather/entities/weather.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeather_0 extends _i1.SmartFake implements _i2.Weather {
  _FakeWeather_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherModel_1 extends _i1.SmartFake implements _i3.WeatherModel {
  _FakeWeatherModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepositoryImpl extends _i1.Mock
    implements _i4.WeatherRepositoryImpl {
  MockWeatherRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Weather> fetchWeather(String? city) => (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [city],
        ),
        returnValue: _i5.Future<_i2.Weather>.value(_FakeWeather_0(
          this,
          Invocation.method(
            #fetchWeather,
            [city],
          ),
        )),
      ) as _i5.Future<_i2.Weather>);

  @override
  _i5.Future<_i2.Weather> getCachedWeather(String? city) => (super.noSuchMethod(
        Invocation.method(
          #getCachedWeather,
          [city],
        ),
        returnValue: _i5.Future<_i2.Weather>.value(_FakeWeather_0(
          this,
          Invocation.method(
            #getCachedWeather,
            [city],
          ),
        )),
      ) as _i5.Future<_i2.Weather>);

  @override
  _i5.Future<void> setCachedWeather(
    String? city,
    _i2.Weather? weather,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCachedWeather,
          [
            city,
            weather,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [WeatherCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherCacheService extends _i1.Mock
    implements _i6.WeatherCacheService {
  MockWeatherCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> setWeather(
    String? city,
    _i3.WeatherModel? weather,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWeather,
          [
            city,
            weather,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.WeatherModel> getWeather(String? city) => (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [city],
        ),
        returnValue: _i5.Future<_i3.WeatherModel>.value(_FakeWeatherModel_1(
          this,
          Invocation.method(
            #getWeather,
            [city],
          ),
        )),
      ) as _i5.Future<_i3.WeatherModel>);
}

/// A class which mocks [WeatherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherService extends _i1.Mock implements _i7.WeatherService {
  MockWeatherService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.WeatherModel> fetchWeather(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [city],
        ),
        returnValue: _i5.Future<_i3.WeatherModel>.value(_FakeWeatherModel_1(
          this,
          Invocation.method(
            #fetchWeather,
            [city],
          ),
        )),
      ) as _i5.Future<_i3.WeatherModel>);
}
